eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"ember-gdrive-todo-mvc/adapters/application\", \n  [\"ember-gdrive/adapters/adapter\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var GDriveAdapter = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = GDriveAdapter;\n  });//# sourceURL=ember-gdrive-todo-mvc/adapters/application.js");

;eval("define(\"ember-gdrive-todo-mvc/adapters/google-drive-permission\", \n  [\"ember\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /*global gapi*/\r\n    var Ember = __dependency1__[\"default\"];\n\n    var DS = __dependency2__[\"default\"];\n\n    \r\n    var Adapter = DS.Adapter.extend({\r\n    \r\n      documentSource: null,\r\n      documentId: Ember.computed.alias(\'documentSource.document.id\'),\r\n    \r\n      createRecord: function (store, type, record) {\r\n    \r\n        var options = {\r\n          resource: {\r\n            value: record.get(\'emailAddress\'),\r\n            type: record.get(\'type\'),\r\n            role: record.get(\'role\')\r\n          },\r\n          fileId: this.get(\'documentId\'),\r\n          sendNotificationEmails: false\r\n        };\r\n    \r\n        var request = gapi.client.drive.permissions.insert(options);\r\n    \r\n        return new Ember.RSVP.Promise(function (resolve, reject) {\r\n          request.execute(function (response) {\r\n            if (response.error) {\r\n              Ember.run(null, reject, response.error);\r\n            } else {\r\n              Ember.run(null, resolve, response);\r\n            }\r\n          });\r\n        });\r\n      },\r\n    \r\n      deleteRecord: function (store, type, record) {\r\n        var request = gapi.client.drive.permissions[\"delete\"]({\r\n          fileId: this.get(\'documentId\'),\r\n          permissionId: record.get(\'id\')\r\n        });\r\n    \r\n        return new Ember.RSVP.Promise(function (resolve, reject) {\r\n          request.execute(function (response) {\r\n            if (response.error) {\r\n              Ember.run(null, reject, response.error);\r\n            } else {\r\n              Ember.run(null, resolve, null);\r\n            }\r\n          });\r\n        });\r\n      },\r\n    \r\n      findAll: function (store, type) {\r\n        var request = gapi.client.drive.permissions.list({\r\n          fileId: this.get(\'documentId\')\r\n        });\r\n    \r\n        return new Ember.RSVP.Promise(function (resolve, reject) {\r\n          request.execute(function (response) {\r\n            if (response.error) {\r\n              Ember.run(null, reject, response.error);\r\n            } else {\r\n              Ember.run(null, resolve, response.items);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n    \r\n    __exports__[\"default\"] = Adapter;\n  });//# sourceURL=ember-gdrive-todo-mvc/adapters/google-drive-permission.js");

;eval("define(\"ember-gdrive-todo-mvc/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"ember-gdrive-todo-mvc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Resolver = __dependency2__[\"default\"];\n\n    var loadInitializers = __dependency3__[\"default\"];\n\n    var config = __dependency4__[\"default\"];\n\n    \r\n    Ember.MODEL_FACTORY_INJECTIONS = true;\r\n    \r\n    var App = Ember.Application.extend({\r\n      modulePrefix: config.modulePrefix,\r\n      podModulePrefix: config.podModulePrefix,\r\n      Resolver: Resolver\r\n    });\r\n    \r\n    loadInitializers(App, config.modulePrefix);\r\n    \r\n    __exports__[\"default\"] = App;\n  });//# sourceURL=ember-gdrive-todo-mvc/app.js");

;eval("define(\"ember-gdrive-todo-mvc/authenticators/gdrive\", \n  [\"ember\",\"simple-auth/authenticators/base\",\"ember-gdrive/lib/auth\",\"ember-gdrive/lib/local-cache\",\"ember-gdrive/lib/config\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Base = __dependency2__[\"default\"];\n\n    var Auth = __dependency3__[\"default\"];\n\n    var Cache = __dependency4__[\"default\"];\n\n    var config = __dependency5__[\"default\"];\n\n    \r\n    var Authenticator = Base.extend({\r\n      \r\n      auth: function () {\r\n        return Auth.create();\r\n      }.property(),\r\n      \r\n      restore: function (properties) {\r\n        var authenticator = this;\r\n        return authenticator.get(\'auth\').authorizeImmediate({\r\n          login_hint: this.inferUserId(),\r\n          client_id: config.get(\'GOOGLE_CLIENT_ID\')\r\n        }).then(function () {\r\n          return authenticator.get(\'auth\').fetchCurrentUser();\r\n        });\r\n      },\r\n    \r\n      authenticate: function (options) {\r\n        var authenticator = this;\r\n        options = options || {};\r\n        return authenticator.get(\'auth\').authorize(Ember.merge(options, { client_id: config.get(\'GOOGLE_CLIENT_ID\') })).then(function () {\r\n          return authenticator.get(\'auth\').fetchCurrentUser();\r\n        });\r\n      },\r\n    \r\n      invalidate: function () {\r\n        return this.get(\'auth\').close();\r\n      },\r\n      \r\n      extractQueryParams: function () {\r\n        var params = {};\r\n        location.search.substr(1).split(\'&\').forEach(function (item) {\r\n          params[item.split(\'=\')[0]] = decodeURIComponent(item.split(\'=\')[1]);\r\n        });\r\n        return params.state ? JSON.parse(params.state) : {};\r\n      },\r\n      \r\n      getDocumentIdFromLocation: function () {\r\n        return location.href.split(\'/#/d/\')[1].split(\'/\')[0];\r\n      },\r\n      \r\n      inferUserId: function() {\r\n        var userId = this.extractQueryParams().userId;\r\n        if (!userId) {\r\n          var cache = new Cache(\'document_login_hint\');\r\n          userId = cache.get(this.getDocumentIdFromLocation());\r\n        }\r\n        return userId;\r\n      }\r\n    });\r\n    \r\n    __exports__[\"default\"] = Authenticator;\n  });//# sourceURL=ember-gdrive-todo-mvc/authenticators/gdrive.js");

;eval("define(\"ember-gdrive-todo-mvc/components/share-modal\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*global gapi, alert, confirm*/\r\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Component.extend({\r\n      tagName: \'share-modal\',\r\n      classNames: [\'share-modal-wrapper\'],\r\n      classNameBindings: [\'isOpen:open\'],\r\n      \r\n      shareAddress: null,\r\n      isOpen: false,\r\n    \r\n      onOpening: function () {\r\n        this.loadData();\r\n      }.on(\'willOpen\'),\r\n    \r\n      onClosing: function () {\r\n        this.set(\'shareAddress\', null);\r\n      }.on(\'willClose\'),\r\n    \r\n      closeOnClick: function (event) {\r\n        if (event.target === this.get(\'element\')) {\r\n          this.close();\r\n        }\r\n      }.on(\'click\'),\r\n    \r\n      open: function () {\r\n        this.trigger(\'willOpen\');\r\n        this.set(\'isOpen\', true);\r\n      },\r\n    \r\n      close: function () {\r\n        this.trigger(\'willClose\');\r\n        this.set(\'isOpen\', false);\r\n      },\r\n    \r\n      \'open-when\': false,\r\n    \r\n      openWhen: function () {\r\n        if (!this.get(\'open-when\')) {\r\n          return;\r\n        }\r\n        this.open();\r\n        this.set(\'open-when\', false);\r\n      }.observes(\'open-when\'),\r\n    \r\n      actions: {\r\n    \r\n        share: function () {\r\n          this.share();\r\n        },\r\n    \r\n        removePermission: function (permission) {\r\n          this.removePermission(permission);\r\n        },\r\n    \r\n        close: function () {\r\n          this.close();\r\n        }\r\n      },\r\n    \r\n      loadData: function () {\r\n        var component = this,\r\n          store = component.get(\'store\');\r\n        store.unloadAll(\'google-drive-permission\');\r\n        store.find(\'google-drive-permission\').then(function (permissions) {\r\n          component.set(\'permissions\', permissions);\r\n        });\r\n      },\r\n    \r\n      share: function () {\r\n        var component = this;\r\n        var permission = component.get(\'store\').createRecord(\'google-drive-permission\', {\r\n          emailAddress: this.get(\'shareAddress\'),\r\n          type: \'user\', // user, group, domain, anyone\r\n          role: \'writer\' // owner, reader, writer\r\n        });\r\n        permission.save().then(function () {\r\n          component.set(\'shareAddress\', null);\r\n        }, function (error) {\r\n          permission.rollback();\r\n          alert(error.message);\r\n        });\r\n      },\r\n    \r\n      removePermission: function (permission) {\r\n        var component = this;\r\n        if (confirm(\'Are you sure?\')) {\r\n          permission.deleteRecord();\r\n          permission.save().then(null, function (error) {\r\n            permission.rollback();\r\n            Ember.run.once(component, component.loadData, null);\r\n          });\r\n        }\r\n      },\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/components/share-modal.js");

;eval("define(\"ember-gdrive-todo-mvc/controllers/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Controller.extend({});\n  });//# sourceURL=ember-gdrive-todo-mvc/controllers/index.js");

;eval("define(\"ember-gdrive-todo-mvc/controllers/login\", \n  [\"ember\",\"ember-gdrive/mixins/login-controller-mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var LoginControllerMixin = __dependency2__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Controller.extend(LoginControllerMixin, {});\n  });//# sourceURL=ember-gdrive-todo-mvc/controllers/login.js");

;eval("define(\"ember-gdrive-todo-mvc/controllers/task\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.ObjectController.extend({\r\n      \r\n      isEditing: false,\r\n      \r\n      isCompleted: function(key, value){\r\n        var model = this.get(\'model\');\r\n    \r\n        if (value === undefined) {\r\n          // property being used as a getter\r\n          return model.get(\'completed\');\r\n        } else {\r\n          // property being used as a setter\r\n          model.set(\'completed\', value);\r\n          model.save();\r\n          return value;\r\n        }\r\n      }.property(\'model.completed\'),\r\n      \r\n      actions: {\r\n        edit: function () {\r\n          this.set(\'isEditing\', true);\r\n        },\r\n    \r\n        \"delete\": function () {\r\n          this.get(\'model\').destroyRecord();\r\n        },\r\n    \r\n        acceptChanges: function () {\r\n          this.set(\'isEditing\', false);\r\n    \r\n          if (Ember.isEmpty(this.get(\'model.title\'))) {\r\n            this.send(\'delete\', task);\r\n          } else {\r\n            this.get(\'model\').save();\r\n          }\r\n        },\r\n      }\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/controllers/task.js");

;eval("define(\"ember-gdrive-todo-mvc/controllers/tasks\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.ArrayController.extend({\r\n    \r\n      newTaskTitle: null,\r\n      isSharing: false,\r\n    \r\n      count: Ember.computed.alias(\'model.length\'),\r\n    \r\n      remainingTasks: Ember.computed.filterBy(\'model\', \'completed\', false),\r\n      remainingCount: Ember.computed.alias(\'remainingTasks.length\'),\r\n    \r\n      completedTasks: Ember.computed.filterBy(\'model\', \'completed\', true),\r\n      completedCount: Ember.computed.alias(\'completedTasks.length\'),\r\n    \r\n      allAreDone: function (key, value) {\r\n        if (value === undefined) {\r\n          return this.get(\'length\') > 0 && this.everyProperty(\'completed\', true);\r\n        } else {\r\n          this.setEach(\'completed\', value);\r\n          this.invoke(\'save\');\r\n          return value;\r\n        }\r\n      }.property(\'@each.completed\'),\r\n    \r\n      actions: {\r\n        create: function () {\r\n    \r\n          var title = this.get(\'newTaskTitle\'),\r\n            controller = this;\r\n    \r\n          if (title.length > 0) {\r\n            var task = this.store.createRecord(\'task\', {\r\n              title: this.get(\'newTaskTitle\')\r\n            });\r\n            task.save().then(function () {\r\n              controller.set(\'newTaskTitle\', \'\');\r\n            });\r\n          }\r\n        },\r\n    \r\n        clearCompleted: function () {\r\n          this.get(\'completedTasks\').invoke(\'destroyRecord\');\r\n        },\r\n        \r\n        share: function () {\r\n          this.set(\'isSharing\', true);\r\n        }\r\n      }\r\n    \r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/controllers/tasks.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/export-application-global\", \n  [\"ember\",\"ember-gdrive-todo-mvc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/export-application-global.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/google-drive-auth\", \n  [\"ember-gdrive/lib/auth\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var GoogleDriveAuth = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = {\r\n      name: \'google-drive-auth\',\r\n      before: [\'store\', \'simple-auth\'],\r\n      initialize: function (container, application) {\r\n        application.register(\'auth:google\', GoogleDriveAuth, {\r\n          instantiate: false\r\n        });\r\n    \r\n        application.inject(\'controller\', \'auth\', \'auth:google\');\r\n        application.inject(\'route\', \'auth\', \'auth:google\');\r\n      }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/google-drive-auth.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/google-drive-permission\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\r\n      name: \'google-drive-permission\',\r\n      after: \'google-drive\',\r\n      initialize: function (container, application) {\r\n        application.inject(\'adapter:google-drive-permission\', \'documentSource\', \'document-source:main\');\r\n      }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/google-drive-permission.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/google-drive\", \n  [\"ember-gdrive/lib/document-source\",\"ember-gdrive/adapters/adapter\",\"ember-gdrive/lib/serializer\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var DocumentSource = __dependency1__[\"default\"];\n\n    var GoogleDriveAdapter = __dependency2__[\"default\"];\n\n    var GoogleDriveSerializer = __dependency3__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = {\r\n      name: \'google-drive\',\r\n      after: \'store\',\r\n      initialize: function (container, application) {\r\n        application.register(\'adapter:-google-drive\', GoogleDriveAdapter);\r\n        application.register(\'serializer:-google-drive\', GoogleDriveSerializer);\r\n    \r\n        application.register(\'document-source:main\', DocumentSource);\r\n    \r\n        application.inject(\'route\', \'documentSource\', \'document-source:main\');\r\n        application.inject(\'controller\', \'documentSource\', \'document-source:main\');\r\n        application.inject(\'adapter:application\', \'documentSource\', \'document-source:main\');\r\n      }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/google-drive.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/load-config\", \n  [\"ember-gdrive/lib/config\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var config = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = {\r\n      name: \'load-config\',\r\n      before: \'simple-auth\',\r\n    \r\n      initialize: function(container, app) {\r\n    \r\n        //get you setting off of the app instance\r\n        config.load(app.get(\'ember-gdrive\'));    \r\n      }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/load-config.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/require-google-libraries\", \n  [\"ember-gdrive/lib/loader\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var loader = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = {\r\n      name: \'require-google-libraries\',\r\n      before: \'google-drive-auth\',\r\n        initialize: function(container, application) {\r\n          application.deferReadiness();\r\n          loader.load().then(function() {\r\n            application.advanceReadiness();\r\n          });\r\n        }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/require-google-libraries.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/share-modal\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\r\n      name: \'inject-store-into-share-modal\',\r\n        after: \'store\',\r\n        initialize: function(container, application) {      \r\n          application.inject(\'component:share-modal\', \'store\', \'store:main\');\r\n        }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/share-modal.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/simple-auth\", \n  [\"simple-auth/configuration\",\"simple-auth/setup\",\"ember-gdrive-todo-mvc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Configuration = __dependency1__[\"default\"];\n    var setup = __dependency2__[\"default\"];\n    var ENV = __dependency3__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name:       \'simple-auth\',\n      initialize: function(container, application) {\n        Configuration.load(container, ENV[\'simple-auth\'] || {});\n        setup(container, application);\n      }\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/simple-auth.js");

;eval("define(\"ember-gdrive-todo-mvc/initializers/store-extensions\", \n  [\"ember\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var DS = __dependency2__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = {\r\n      name: \'store-extensions\',\r\n      before: \'store\',\r\n      initialize: function () {\r\n        DS.Store.reopen({\r\n          undo: function () {\r\n            this._defaultAdapter().undo();\r\n          },\r\n          redo: function () {\r\n            this._defaultAdapter().redo();\r\n          },\r\n          beginSave: function (name) {\r\n            this._defaultAdapter().beginSave(name);\r\n          },\r\n          endSave: function (name) {\r\n            this._defaultAdapter().endSave(name);\r\n          },\r\n          beginOperation: function (name) {\r\n            this._defaultAdapter().beginSave(name);\r\n          },\r\n          endOperation: function (name) {\r\n            Ember.run.schedule(\'afterRender\', this, function () {\r\n              this._defaultAdapter().endSave(name);\r\n            });\r\n          },\r\n          _defaultAdapter: function () {\r\n            return this.container.lookup(\'adapter:application\');\r\n          }\r\n        });\r\n      }\r\n    };\n  });//# sourceURL=ember-gdrive-todo-mvc/initializers/store-extensions.js");

;eval("define(\"ember-gdrive-todo-mvc/models/google-drive-permission\", \n  [\"ember\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var DS = __dependency2__[\"default\"];\n\n    \r\n    var GoogleDrivePermission = DS.Model.extend({\r\n      domain: DS.attr(\'string\'),\r\n      emailAddress: DS.attr(\'string\'),\r\n      etag: DS.attr(\'string\'),\r\n      kind: DS.attr(\'string\'),\r\n      name: DS.attr(\'string\'),\r\n      photoLink: DS.attr(\'string\'),\r\n      role: DS.attr(\'string\'),\r\n      selfLink: DS.attr(\'string\'),\r\n      type: DS.attr(\'string\')\r\n    });\r\n    \r\n    __exports__[\"default\"] = GoogleDrivePermission;\n  });//# sourceURL=ember-gdrive-todo-mvc/models/google-drive-permission.js");

;eval("define(\"ember-gdrive-todo-mvc/models/task\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    \r\n    var Task = DS.Model.extend({\r\n      title: DS.attr(\'string\', { defaultValue: \'New task\' }),\r\n      completed: DS.attr(\'boolean\', { defaultValue: false })\r\n    });\r\n    \r\n    __exports__[\"default\"] = Task;\n  });//# sourceURL=ember-gdrive-todo-mvc/models/task.js");

;eval("define(\"ember-gdrive-todo-mvc/router\", \n  [\"ember\",\"ember-gdrive-todo-mvc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var config = __dependency2__[\"default\"];\n\n    \r\n    var Router = Ember.Router.extend({\r\n      location: config.locationType\r\n    });\r\n    \r\n    Router.map(function() {\r\n      this.resource(\'document\', { path: \'d/:document_id\' }, function() {\r\n          this.resource(\'tasks\', { path: \'tasks\' }, function() {\r\n            this.route(\'remaining\');\r\n            this.route(\'completed\');\r\n          });\r\n      });\r\n      \r\n      this.resource(\'login\');\r\n    });\r\n    \r\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=ember-gdrive-todo-mvc/router.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/application\", \n  [\"ember\",\"ember-gdrive/mixins/application-route-mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var ApplicationRouteMixin = __dependency2__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend(ApplicationRouteMixin, {});\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/application.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/document\", \n  [\"ember\",\"ember-gdrive/mixins/authenticated-route-mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var AuthenticatedRouteMixin = __dependency2__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend(AuthenticatedRouteMixin, {\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/document.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/document/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend({\r\n      redirect: function() {\r\n        this.replaceWith(\'tasks\');\r\n      }\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/document/index.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/tasks\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend({\r\n      title: \'Tasks\',\r\n    \r\n      model: function() {\r\n        return this.store.find(\'task\');\r\n      }\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/tasks.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/tasks/completed\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend({\r\n      model: function() {\r\n        return this.store.filter(\'task\', function(task){\r\n          return task.get(\'completed\');\r\n        });\r\n      },\r\n      \r\n      renderTemplate: function(controller) {\r\n        this.render(\'tasks/index\', {controller: controller});\r\n      }\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/tasks/completed.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/tasks/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend({\r\n      model: function() {\r\n        return this.store.find(\'task\');\r\n      },\r\n      \r\n      renderTemplate: function(controller) {\r\n        this.render(\'tasks/index\', {controller: controller});\r\n      }\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/tasks/index.js");

;eval("define(\"ember-gdrive-todo-mvc/routes/tasks/remaining\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend({\r\n      model: function() {\r\n        return this.store.filter(\'task\', function(task){\r\n          return !task.get(\'completed\');\r\n        });\r\n      },\r\n      \r\n      renderTemplate: function(controller) {\r\n        this.render(\'tasks/index\', {controller: controller});\r\n      }\r\n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/routes/tasks/remaining.js");

;eval("define(\"ember-gdrive-todo-mvc/templates/components/share-modal\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\r\\n  <div class=\\\"share-modal\\\">\\r\\n\\r\\n    <div class=\\\"share-modal-head\\\">\\r\\n      <h1>Share document</h1>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"share-modal-body\\\">\\r\\n      <h1>Users with access to document</h1>\\r\\n      <ul>\\r\\n        \");\n      stack1 = helpers.each.call(depth0, \"permission\", \"in\", \"permissions\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n      </ul>\\r\\n\\r\\n      <h1>Share with more users</h1>\\r\\n      <form action \'share\' on=\\\"submit\\\">\\r\\n        \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'placeholder\': (\"Type e-mail\"),\n        \'value\': (\"shareAddress\")\n      },hashTypes:{\'placeholder\': \"STRING\",\'value\': \"ID\"},hashContexts:{\'placeholder\': depth0,\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\r\\n        <input type=\\\"submit\\\" value=\\\"Share\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"share\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"/>\\r\\n      </form>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"share-modal-footer\\\">\\r\\n      <button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"close\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"button regular\\\">Close</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n        <li><a \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"removePermission\", \"permission\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers[\'if\'].call(depth0, \"permission.name\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a>\\r\\n        </li>\\r\\n        \");\n      return buffer;\n      }\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"permission.name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" \");\n      stack1 = helpers._triageMustache.call(depth0, \"permission.emailAddress\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"permission.emailAddress\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n\n      stack1 = helpers[\'if\'].call(depth0, \"isOpen\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/templates/components/share-modal.js");

;eval("define(\"ember-gdrive-todo-mvc/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"\\r\\n  <a href=\\\"https://drive.google.com\\\" class=\\\"btn btn-default btn-lg home-button\\\">Go to Google Drive</a>\\r\\n\");\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\r\\n  <h4 class=\\\"col-md-4 col-md-offset-4\\\" style=\\\"text-align: center;\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-default btn-lg home-button\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"login\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">\\r\\n          <span>Login with Google</span>\\r\\n      </button>\\r\\n  </h4>\\r\\n\");\n      return buffer;\n      }\n\n      stack1 = helpers[\'if\'].call(depth0, \"session.isAuthenticated\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/templates/index.js");

;eval("define(\"ember-gdrive-todo-mvc/templates/login\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"content flexbox__wrapper\\\">\\r\\n	<div class=\\\"login_box\\\">\\r\\n		<!-- <h1 class=\\\"login_title\\\">Login Dude</h1> -->\\r\\n\\r\\n		<div class=\\\"login_body\\\">\\r\\n			<p>\\r\\n				<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"authenticate\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"login_button\\\">\\r\\n					Login with Google\\r\\n				</button>\\r\\n			</p>\\r\\n		</div>\\r\\n	</div>\\r\\n</div>\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/templates/login.js");

;eval("define(\"ember-gdrive-todo-mvc/templates/tasks\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"All\");\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"Remaining\");\n      }\n\n    function program5(depth0,data) {\n      \n      \n      data.buffer.push(\"Completed\");\n      }\n\n      data.buffer.push(\"<section id=\\\"todoapp\\\">\\r\\n  <header id=\\\"header\\\">\\r\\n    <h1>ember-gdrive</h1>\\r\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'id\': (\"new-todo\"),\n        \'placeholder\': (\"Type task title\"),\n        \'value\': (\"newTaskTitle\"),\n        \'action\': (\"create\")\n      },hashTypes:{\'id\': \"STRING\",\'placeholder\': \"STRING\",\'value\': \"ID\",\'action\': \"STRING\"},hashContexts:{\'id\': depth0,\'placeholder\': depth0,\'value\': depth0,\'action\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\r\\n  </header>\\r\\n \\r\\n  <section id=\\\"main\\\">\\r\\n    \");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" \\r\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'id\': (\"toggle-all\"),\n        \'checked\': (\"allAreDone\")\n      },hashTypes:{\'type\': \"STRING\",\'id\': \"STRING\",\'checked\': \"ID\"},hashContexts:{\'type\': depth0,\'id\': depth0,\'checked\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\r\\n  </section>\\r\\n \\r\\n  <footer id=\\\"footer\\\">\\r\\n    <span id=\\\"todo-count\\\">\\r\\n      <strong>\");\n      stack1 = helpers._triageMustache.call(depth0, \"remainingCount\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</strong> todos left\\r\\n    </span>\\r\\n    <ul id=\\\"filters\\\">\\r\\n      <li>\\r\\n        \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'activeClass\': (\"selected\")\n      },hashTypes:{\'activeClass\': \"STRING\"},hashContexts:{\'activeClass\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"tasks.index\", options) : helperMissing.call(depth0, \"link-to\", \"tasks.index\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n      </li>\\r\\n      <li>\\r\\n        \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'activeClass\': (\"selected\")\n      },hashTypes:{\'activeClass\': \"STRING\"},hashContexts:{\'activeClass\': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"tasks.remaining\", options) : helperMissing.call(depth0, \"link-to\", \"tasks.remaining\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n      </li>\\r\\n      <li>\\r\\n        \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'activeClass\': (\"selected\")\n      },hashTypes:{\'activeClass\': \"STRING\"},hashContexts:{\'activeClass\': depth0},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"tasks.completed\", options) : helperMissing.call(depth0, \"link-to\", \"tasks.completed\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n      </li>\\r\\n    </ul>\\r\\n \\r\\n    <button id=\\\"clear-completed\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clearCompleted\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">\\r\\n      Clear completed (\");\n      stack1 = helpers._triageMustache.call(depth0, \"completedCount\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\")\\r\\n    </button>\\r\\n  </footer>\\r\\n</section>\\r\\n \\r\\n<footer id=\\\"info\\\">\\r\\n  <p>Double-click to edit a todo</p>\\r\\n  <p><a \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"share\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Click here to share this document</a></p>\\r\\n</footer>\\r\\n\\r\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'share-modal\'] || (depth0 && depth0[\'share-modal\']),options={hash:{\n        \'open-when\': (\"isSharing\")\n      },hashTypes:{\'open-when\': \"ID\"},hashContexts:{\'open-when\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"share-modal\", options))));\n      data.buffer.push(\"\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/templates/tasks.js");

;eval("define(\"ember-gdrive-todo-mvc/templates/tasks/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\r\\n  <li \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"task.isCompleted:complete task.isEditing:editing\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\r\\n    \");\n      stack1 = helpers[\'if\'].call(depth0, \"task.isEditing\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n    \\r\\n  </li>\\r\\n  \");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\r\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'class\': (\"edit\"),\n        \'value\': (\"task.title\"),\n        \'focus-out\': (\"acceptChanges\"),\n        \'insert-newline\': (\"acceptChanges\"),\n        \'autofocus\': (\"autofocus\")\n      },hashTypes:{\'class\': \"STRING\",\'value\': \"ID\",\'focus-out\': \"STRING\",\'insert-newline\': \"STRING\",\'autofocus\': \"STRING\"},hashContexts:{\'class\': depth0,\'value\': depth0,\'focus-out\': depth0,\'insert-newline\': depth0,\'autofocus\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\r\\n    \");\n      return buffer;\n      }\n\n    function program4(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\r\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'checked\': (\"task.completed\"),\n        \'class\': (\"toggle\")\n      },hashTypes:{\'type\': \"STRING\",\'checked\': \"ID\",\'class\': \"STRING\"},hashContexts:{\'type\': depth0,\'checked\': depth0,\'class\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\r\\n      <label \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"edit\", {hash:{\n        \'on\': (\"doubleClick\")\n      },hashTypes:{\'on\': \"STRING\"},hashContexts:{\'on\': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"task.title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</label>\\r\\n      <button class=\\\"destroy\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"delete\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\"></button>\\r\\n    \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<ul id=\\\"todo-list\\\">\\r\\n  \");\n      stack1 = helpers.each.call(depth0, \"task\", \"in\", \"model\", {hash:{\n        \'itemController\': (\"task\")\n      },hashTypes:{\'itemController\': \"STRING\"},hashContexts:{\'itemController\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n</ul>\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/templates/tasks/index.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/adapters/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/application.js should pass jshint\', function() { \n      ok(true, \'adapters/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/adapters/application.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/app.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/controllers/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/index.js should pass jshint\', function() { \n      ok(true, \'controllers/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/controllers/index.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/controllers/login.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/login.js should pass jshint\', function() { \n      ok(true, \'controllers/login.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/controllers/login.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/controllers/task.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/task.js should pass jshint\', function() { \n      ok(true, \'controllers/task.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/controllers/task.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/controllers/tasks.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/tasks.js should pass jshint\', function() { \n      ok(true, \'controllers/tasks.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/controllers/tasks.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/ember-gdrive-todo-mvc/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-gdrive-todo-mvc/tests/helpers\');\n    test(\'ember-gdrive-todo-mvc/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'ember-gdrive-todo-mvc/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/ember-gdrive-todo-mvc/tests/helpers/resolver.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/ember-gdrive-todo-mvc/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-gdrive-todo-mvc/tests/helpers\');\n    test(\'ember-gdrive-todo-mvc/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'ember-gdrive-todo-mvc/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/ember-gdrive-todo-mvc/tests/helpers/start-app.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/ember-gdrive-todo-mvc/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-gdrive-todo-mvc/tests\');\n    test(\'ember-gdrive-todo-mvc/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'ember-gdrive-todo-mvc/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/ember-gdrive-todo-mvc/tests/test-helper.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/helpers/resolver\", \n  [\"ember/resolver\",\"ember-gdrive-todo-mvc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    var config = __dependency2__[\"default\"];\n\n    \r\n    var resolver = Resolver.create();\r\n    \r\n    resolver.namespace = {\r\n      modulePrefix: config.modulePrefix,\r\n      podModulePrefix: config.podModulePrefix\r\n    };\r\n    \r\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/helpers/resolver.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/helpers/start-app\", \n  [\"ember\",\"ember-gdrive-todo-mvc/app\",\"ember-gdrive-todo-mvc/router\",\"ember-gdrive-todo-mvc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Application = __dependency2__[\"default\"];\n\n    var Router = __dependency3__[\"default\"];\n\n    var config = __dependency4__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = function startApp(attrs) {\r\n      var App;\r\n    \r\n      var attributes = Ember.merge({}, config.APP);\r\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\r\n    \r\n      Ember.run(function() {\r\n        App = Application.create(attributes);\r\n        App.setupForTesting();\r\n        App.injectTestHelpers();\r\n      });\r\n    \r\n      return App;\r\n    }\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/helpers/start-app.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/models/task.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/task.js should pass jshint\', function() { \n      ok(true, \'models/task.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/models/task.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/router.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(true, \'routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/application.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/document.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/document.js should pass jshint\', function() { \n      ok(true, \'routes/document.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/document.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/document/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/document\');\n    test(\'routes/document/index.js should pass jshint\', function() { \n      ok(true, \'routes/document/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/document/index.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/tasks.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/tasks.js should pass jshint\', function() { \n      ok(true, \'routes/tasks.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/tasks.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/tasks/completed.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/tasks\');\n    test(\'routes/tasks/completed.js should pass jshint\', function() { \n      ok(true, \'routes/tasks/completed.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/tasks/completed.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/tasks/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/tasks\');\n    test(\'routes/tasks/index.js should pass jshint\', function() { \n      ok(true, \'routes/tasks/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/tasks/index.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/routes/tasks/remaining.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/tasks\');\n    test(\'routes/tasks/remaining.js should pass jshint\', function() { \n      ok(true, \'routes/tasks/remaining.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/routes/tasks/remaining.jshint.js");

;eval("define(\"ember-gdrive-todo-mvc/tests/test-helper\", \n  [\"ember-gdrive-todo-mvc/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n\n    var setResolver = __dependency2__.setResolver;\n\n    \r\n    setResolver(resolver);\r\n    \r\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\r\n    \r\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\r\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\r\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=ember-gdrive-todo-mvc/tests/test-helper.js");

/* jshint ignore:start */

define('ember-gdrive-todo-mvc/config/environment', ['ember'], function(Ember) {
  var prefix = 'ember-gdrive-todo-mvc';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */




});

if (runningTests) {
  require("ember-gdrive-todo-mvc/tests/test-helper");
} else {
  require("ember-gdrive-todo-mvc/app")["default"].create({"ember-gdrive":{"GOOGLE_API_KEY":"AIzaSyBQ8R2PRoiMnetrIhyFevjnqFmq84_Se2c","GOOGLE_MIME_TYPE":"application/todomvc","GOOGLE_DRIVE_SDK_APP_ID":"872473528107","GOOGLE_CLIENT_ID":"872473528107-us5nehkt2ai460gskr325pnmbjm4u0tu.apps.googleusercontent.com"},"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}




/* jshint ignore:end */
